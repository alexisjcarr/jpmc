From 0d7a1a55e3532f34291877ff4d7342286d255706 Mon Sep 17 00:00:00 2001
From: alexisjcarr <acarr59@gmail.com>
Date: Mon, 4 Nov 2019 22:52:56 -0600
Subject: [PATCH] =?UTF-8?q?=E2=9C=A8=20Creates=20patch=20file?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

---
 src/App.tsx   | 26 +++++++++++++++++++-------
 src/Graph.tsx | 17 +++++++++++++++--
 2 files changed, 34 insertions(+), 9 deletions(-)

diff --git a/src/App.tsx b/src/App.tsx
index bcbbbde..1d2114d 100755
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -8,6 +8,7 @@ import "./App.css";
  */
 interface IState {
   data: ServerRespond[];
+  showGraph: boolean;
 }
 
 /**
@@ -21,7 +22,8 @@ class App extends Component<{}, IState> {
     this.state = {
       // data saves the server responds.
       // We use this state to parse data down to the child element (Graph) as element property
-      data: []
+      data: [],
+      showGraph: false
     };
   }
 
@@ -29,18 +31,28 @@ class App extends Component<{}, IState> {
    * Render Graph react component with state.data parse as property data
    */
   renderGraph() {
-    return <Graph data={this.state.data} />;
+    if (this.state.showGraph) {
+      return <Graph data={this.state.data} />;
+    }
   }
 
   /**
    * Get new data from server and update the state with the new data
    */
   getDataFromServer() {
-    DataStreamer.getData((serverResponds: ServerRespond[]) => {
-      // Update the state by creating a new array of data that consists of
-      // Previous data in the state and the new data from server
-      this.setState({ data: [...this.state.data, ...serverResponds] });
-    });
+    let x = 0;
+    const interval = setInterval(() => {
+      DataStreamer.getData((serverResponds: ServerRespond[]) => {
+        this.setState({
+          data: serverResponds,
+          showGraph: true
+        });
+      });
+      x++;
+      if (x > 1000) {
+        clearInterval(interval);
+      }
+    }, 100);
   }
 
   /**
diff --git a/src/Graph.tsx b/src/Graph.tsx
index da44afd..a9f5d52 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -16,7 +16,7 @@ interface IProps {
  * This interface acts as a wrapper for Typescript compiler.
  */
 
-interface PerspectiveViewerElement {
+interface PerspectiveViewerElement extends HTMLElement {
   load: (table: Table) => void;
 }
 
@@ -34,7 +34,7 @@ class Graph extends Component<IProps, {}> {
 
   componentDidMount() {
     // Get element to attach the table from the DOM.
-    const elem: PerspectiveViewerElement = (document.getElementsByTagName(
+    const elem = (document.getElementsByTagName(
       "perspective-viewer"
     )[0] as unknown) as PerspectiveViewerElement;
 
@@ -53,6 +53,19 @@ class Graph extends Component<IProps, {}> {
 
       // Add more Perspective configurations here.
       elem.load(this.table);
+      elem.setAttribute("view", "y_line");
+      elem.setAttribute("colum-pivots", '["stock"]');
+      elem.setAttribute("row-pivots", '["timestamp"]');
+      elem.setAttribute("columns", '["top_ask_price"]');
+      elem.setAttribute(
+        "aggregates",
+        `
+      {"stock":"distinct count", 
+      "top_ask_price":"avg",
+      "top_bid_price":"avg",
+      "timestamp":"distinct count"
+    }`
+      );
     }
   }
 
-- 
2.20.1

